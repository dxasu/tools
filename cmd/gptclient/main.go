// main.go
package main

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"go/format"
	"io"
	"os"
	"path/filepath"
	"regexp"
	"strings"
	"time"

	"log"
	"net/http"

	"github.com/fatih/color"
)

func main() {
	params := os.Args[1:]
	waitAll := false
	if len(os.Args) > 1 && os.Args[1] == "-w" {
		waitAll = true
		params = os.Args[2:]
	}
	if len(params) == 0 {
		fmt.Printf("Usage: %s [-w] [text]\n", filepath.Base(os.Args[0]))
		os.Exit(1)
	}
	gptRet(waitAll, strings.Join(params, " "))
}

func gptRet(waitAll bool, text string) {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	// curl 'https://api.binjie.fun/api/generateStream?refer__1360=YqGxn7G%3DitKewOxBwY1GkDuDfOjRHo1dH4D' \
	//   -H 'authority: api.binjie.fun' \
	//   -H 'pragma: no-cache' \
	//   -H 'cache-control: no-cache' \
	//   -H 'sec-ch-ua: "(Not(A:Brand";v="8", "Chromium";v="98"' \
	//   -H 'accept: application/json, text/plain, */*' \
	//   -H 'content-type: application/json' \
	//   -H 'sec-ch-ua-mobile: ?0' \
	//   -H 'user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36 QQBrowser/5.0.4.209' \
	//   -H 'sec-ch-ua-platform: "macOS"' \
	//   -H 'origin: https://chat18.aichatos8.xyz' \
	//   -H 'sec-fetch-site: cross-site' \
	//   -H 'sec-fetch-mode: cors' \
	//   -H 'sec-fetch-dest: empty' \
	//   -H 'referer: https://chat18.aichatos8.xyz/' \
	//   -H 'accept-language: zh-CN,zh;q=0.9' \
	//   --data-raw '{"prompt":"golang profile","userId":"#/chat/1733920077040","network":true,"system":"","withoutContext":false,"stream":false}' \
	//   --compressed

	type Payload struct {
		Prompt         string `json:"prompt"`
		UserID         string `json:"userId"`
		Network        bool   `json:"network"`
		System         string `json:"system"`
		WithoutContext bool   `json:"withoutContext"`
		Stream         bool   `json:"stream"`
	}

	data := Payload{
		Prompt:         text,
		UserID:         "#/chat/1733920077040",
		Network:        true,
		System:         "",
		WithoutContext: false,
		Stream:         false,
	}
	payloadBytes, _ := json.Marshal(data)
	body := bytes.NewReader(payloadBytes)

	req, _ := http.NewRequest(http.MethodPost, "https://api.binjie.fun/api/generateStream?refer__1360=YqGxn7G%3DitKewOxBwY1GkDuDfOjRHo1dH4D", body)

	req.Header.Set("Authority", "api.binjie.fun")
	req.Header.Set("Pragma", "no-cache")
	req.Header.Set("Cache-Control", "no-cache")
	req.Header.Set("Sec-Ch-Ua", "\"(Not(A:Brand\";v=\"8\", \"Chromium\";v=\"98\"")
	req.Header.Set("Accept", "application/json, text/plain, */*")
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Sec-Ch-Ua-Mobile", "?0")
	req.Header.Set("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36 QQBrowser/5.0.4.209")
	req.Header.Set("Sec-Ch-Ua-Platform", "\"macOS\"")
	req.Header.Set("Origin", "https://chat18.aichatos8.xyz")
	req.Header.Set("Sec-Fetch-Site", "cross-site")
	req.Header.Set("Sec-Fetch-Mode", "cors")
	req.Header.Set("Sec-Fetch-Dest", "empty")
	req.Header.Set("Referer", "https://chat18.aichatos8.xyz/")
	req.Header.Set("Accept-Language", "zh-CN,zh;q=0.9")

	ctx, cancel := context.WithCancel(context.Background())
	go wait(ctx)
	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		log.Fatalln(err)
	}
	defer resp.Body.Close()
	if !waitAll {
		// 逐步读取响应体并输出
		// 使用 io.Copy 从响应体流中逐步读取并输出到标准输出
		cancel()
		fmt.Println()
		_, err = io.Copy(os.Stdout, resp.Body)
		if err != nil {
			log.Fatalln(err)
		}
		return
	}

	bodyBytes, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Fatalln(err)
	}
	cancel()
	fmt.Println()
	fmt.Println(applyColorToOutput(bodyBytes))

	// htmlContent := blackfriday.Run(bodyBytes)
	// doc, err := goquery.NewDocumentFromReader(strings.NewReader(string(htmlContent)))
	// if err != nil {
	// 	log.Fatal(err)
	// }
	// text = doc.Text()
	// fmt.Println(applyColorToOutput([]byte(text)))
}

func wait(ctx context.Context) {
	fmt.Fprint(os.Stdout, "waiting")
	for {
		select {
		case <-ctx.Done():
			return
		default:
			fmt.Fprint(os.Stdout, ".")
			time.Sleep(1 * time.Second)
		}
	}
}

func getVal(cnt int) int {
	p := 255 - cnt*32
	if p < 32 {
		p = 32
	}
	return p
}

var matchNumber = regexp.MustCompile(`^[0-9]+\.`)

func prefixType(s string) (int, int) {
	if strings.HasPrefix(s, "//") {
		return 1, 0
	} else if strings.HasPrefix(s, "- ") {
		return 2, 0
	} else if strings.HasPrefix(s, "*") {
		return 3, countChar(s, '*')
	} else if strings.HasPrefix(s, "```go") {
		return 4, 0
	} else if strings.HasPrefix(s, "```") {
		return 5, 0
	} else if matchNumber.MatchString(s) {
		return 6, 0
	} else if strings.HasPrefix(s, "#") {
		return 7, countChar(s, '#')
	} else {
		return 0, 0
	}
}

// 应用颜色格式到输出
func applyColorToOutput(input []byte) string {
	// input = blackfriday.Run(input)
	var coloredOutput string
	lines := strings.Split(string(input), "\n")
	for idx := 0; idx < len(lines); idx++ {
		line := lines[idx]
		pType, pCnt := prefixType(line)
		// 处理标题
		// line = strings.TrimSpace(line)
		switch pType {
		default:
			// 普通文本
			coloredOutput += line + "\n"
		case 1: // 注释
			coloredOutput += color.New(color.BgBlue, color.Bold).SprintFunc()(line) + "\n"
		case 2:
			// -
			coloredOutput += color.CyanString(line) + "\n"
		case 3:
			// *
			coloredOutput += color.MagentaString(line) + "\n"
		case 4, 5:
			// 代码块
			code, i := formatGoCode(lines[idx:])
			idx += i
			coloredOutput += color.BlackString(code) + "\n"
		case 6:
			// 1.
			coloredOutput += color.GreenString(line) + "\n"
		case 7:
			// #
			p := getVal(pCnt)
			coloredOutput += color.RGB(0, p, p).Sprintln(line)
		}
	}

	return coloredOutput
}

func formatGoCode(lines []string) (string, int) {
	var idx int
	for ; idx < len(lines); idx++ {
		pType, _ := prefixType(lines[idx])
		if pType == 5 {
			break
		}
	}

	code := strings.Join(lines[:idx], "\n")
	var formatCode []byte
	// 使用 go/format 包格式化代码
	formattedCode, err := format.Source([]byte(code))
	if err == nil {
		formatCode = formattedCode
	} else {
		formatCode = []byte(code)
	}
	return string(formatCode), idx
}

func countChar(s string, c byte) int {
	count := 0
	for i := 0; i < len(s); i++ {
		if s[i] != c { // 遇到指定字符，计数器加一
			break
		}
		count++
	}
	return count
}
